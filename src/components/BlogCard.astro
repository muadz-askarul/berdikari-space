---
import AvatarComponent from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import {
  getCombinedReadingTime,
  getSubpostCount,
  isSubpost,
  parseAuthors,
} from '@/lib/data-utils'
import { formatDate } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'
import Link from './Link.astro'

interface Props {
  entry: CollectionEntry<'blog'> | CollectionEntry<'event'> | CollectionEntry<'news'>
}

const { entry } = Astro.props
const formattedDate = formatDate(entry.data.date)
const readTime = await getCombinedReadingTime(entry.id)
const authors = await parseAuthors(entry.data.authors ?? [])
const subpostCount = !isSubpost(entry.id) ? await getSubpostCount(entry.id) : 0
---

<div class="hover:bg-secondary/50 transition-colors duration-300 ease-in-out">
  <Link href={`/${entry.collection}/${entry.id}`} class="flex flex-row gap-2">
    {
      entry.data.image && (
        <div class="rela max-w-[125px] md:max-w-3xs flex items-center">
          <div>
            <Image
              src={entry.data.image}
              alt={entry.data.title}
              width={1200}
              height={630}
              class="object-cover"
            />
          </div>
        </div>
      )
    }

    <div>
      <h3 class="mb-1 text-sm md:text-lg font-medium">{entry.data.title}</h3>

      <div
        class="text-muted-foreground mb-2 flex flex-wrap items-center gap-x-2 text-[10px] md:text-xs"
      >
        {
          authors.length > 0 && (
            <>
              {authors.map((author) => (
                <div class="flex items-center gap-x-1.5">
                  <AvatarComponent
                    client:load
                    src={author.avatar}
                    alt={author.name}
                    fallback={author.name[0]}
                    className="size-5 rounded-full"
                  />
                  <span>{author.name}</span>
                </div>
              ))}
              <Separator orientation="vertical" className="h-4!" />
            </>
          )
        }
        <span>{formattedDate}</span>
      </div>

      {
        entry.data.tags && (
          <div class="flex flex-wrap gap-2">
            {entry.data.tags.map((tag) => (
              <Badge variant="secondary" className="flex items-center gap-x-1">
                <Icon name="lucide:hash" class="size-3" />
                <span class="text-[10px] md:text-xs">{tag}</span>
              </Badge>
            ))}
          </div>
        )
      }
    </div>
  </Link>
</div>
